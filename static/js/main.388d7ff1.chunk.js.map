{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","class","onClick","togglemode","for","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","style","color","heading","backgroundColor","value","onChange","event","console","log","target","rows","newText","words","split","uppercaseword","forEach","element","document","getElementById","select","navigator","clipboard","writeText","length","defaultProps","App","setmode","_useState3","_useState4","setAlert","showAlert","message","setTimeout","Fragment","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.388d7ff1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    // this function capitalize is made to just make the first letter of props.alert.type capital in this case S of Success is made capital\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n          {/* && operator is very important otherwise the prop alone returns value as null and it does not loads the page  */}\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import React from 'react'\r\n\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            {/* props.mode used here is actually to recieve the values from the mode state defined in js  */}\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                {/* link to property is used to linking the page to the specified location */}\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                          \r\n                          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                                       {/* link to property is used to linking the page to the specified location */}\r\n\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                                     {/* link to property is used to linking the page to the specified location */}\r\n\r\n                        </li>\r\n                    </ul>\r\n                    <div class={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        {/* Here since the text on the button with 'Enable Dark mode' have to be inverse of dark mode color hence we used an inverse through ternary operator again  */}\r\n                        {/* One thing to note here is we have used back ticks and dollar sign here and not like in textform where we used the things directly */}\r\n                            <input class=\"form-check-input\" type=\"checkbox\" onClick={props.togglemode}  role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                            {/* onClick function is used to initiate the togglemode function through the props */}\r\n                            <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">Enable Dark mode</label>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n// Navbar.propTypes = {\r\n//     title: PropTypes.string.isRequired,\r\n//     aboutText: PropTypes.string.isRequired\r\n// }\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };","\r\nimport React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  \r\n  \r\n  const HandleUpClick =() => {\r\n    console.log('Button was clicked');\r\n    let newText = text.toUpperCase();\r\n    setText(newText)\r\n\r\n  }\r\n\r\n  const HandleLowClick =() => {\r\n    console.log('Button was clicked');\r\n    let newText = text.toLowerCase();\r\n    setText(newText)\r\n\r\n  } \r\n\r\n  const HandleCapClick =() => {\r\n    console.log('Button was clicked');\r\n   let words = text.split(\" \")\r\n   let uppercaseword = ''\r\n\r\n   words.forEach(element => {\r\n\r\n    uppercaseword += element.charAt(0).toUpperCase() + element.slice(1) + \" \"\r\n    \r\n   });\r\n   setText(uppercaseword)\r\n\r\n  } \r\n\r\n\r\n\r\n\r\n  const HandleOnChange = (event) =>{\r\n   console.log(\"On change\");\r\n   setText(event.target.value);\r\n\r\n  }\r\n\r\n  const HandleCopClick = () =>{\r\n    console.log('Text is copied')\r\n    var text = document.getElementById('TxtBox');\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  }\r\n\r\n  const[text, setText] = useState('Enter text here');  \r\n  \r\n  return (\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n      {/* Remember that there are two {} brackets one is for the style tag itself and the other is to use the javascript */}\r\n     <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n      \r\n      <textarea className=\"form-control\" id='TxtBox' style= {{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}} value={text} onChange={HandleOnChange} rows=\"4\"></textarea>\r\n      {/* Important point -One thing is to note here that we didnt use back ticks and $ dollar sign maybe because we are entering value in style css sheet  */}\r\n      </div>\r\n      <button className='btn btn-primary mx-1' onClick={HandleUpClick} >Convert to Uppercase</button>\r\n      <button className='btn btn-primary mx-1' onClick={HandleLowClick} >Convert to Lowercase</button>\r\n      <button className='btn btn-primary mx-1' onClick={HandleCapClick} >Convert to Capital</button>\r\n      <button className='btn btn-primary mx-1' onClick={HandleCopClick} >Copy Text</button>\r\n\r\n      <div className=\"container my-3 \" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>Your text changes</h2>\r\n        <p>{text.split(\" \").length}  word and {text.length}characters</p>\r\n        {/* {text.split(\" \").length} it takes the string then returns it as an array  */}\r\n\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React from 'react'\n// import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\n\nfunction App() {\n  const [mode,setmode] = useState('light');   \n // -->This useState set the default as light color\n \n const [alert, setAlert] = useState(null);\n//  -->Alert usestate is initialized with null \n\n const showAlert = (message, type)=>{\n     setAlert({\n       msg: message,\n       type: type\n     })\n    //  set alert is declared as an object \n     setTimeout(() => {\n         setAlert(null);\n     }, 1500);\n }\n//  showalert function is made to pass two values namely message and type for the alert to show \n// set timeout is used dimiss the alert by its own for it to remain intact even if msg gets disappeared because if user \\\n// himself dimisses the msg by clicking on cross mark then it never appears again \n\n    const togglemode = () =>{\n  if (mode=== 'light'){\n    setmode('dark');\n    document.body.style.backgroundColor = '#042743';\n    document.title= 'Textutils- Dark mode '\n    // Changes the title on click \n    showAlert(\"Dark mode activated\" ,\"success\")\n  }\n  // We have inserted the showalert function here for it to get activated on clicking the button \n  // it also passes the message and type value into setalert object \n  else{\n    setmode('light');\n    document.body.style.backgroundColor = 'white';\n    document.title= 'Textutils- Home '\n        // Changes the title on click \n\n    showAlert(\"Dark mode is deactivated\" ,\"success\")\n  }\n}\n\n// This toggle mode is used to make the set mode as dark if the color is light and vice versa ,it is basically to inverse the color \n\n  return (\n    <>\n    \n \n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} togglemode={togglemode} />\n    {/* mode used here is the state variable and the togglemode is actually the function used to inverse the dark mode color */}\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch> */}\n    {/* /users --> Component 1\n        /users/home --> Component 2 */}\n          {/* <Route exact path=\"/about\">\n            {/* route is basically used to transport the given component  */}\n            {/* <About />\n          </Route> */} \n          {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n          {/* </Route> */}\n    {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n    </> \n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}